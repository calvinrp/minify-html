// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod exports {
  pub mod wilsonzlin {
    pub mod minify_html {
      #[allow(clippy::all)]
      pub mod minify_html {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() =
          super::super::super::super::__link_custom_section_describing_imports;
        use super::super::super::super::_rt;
        /// Configuration settings that can be adjusted and passed to a minification function to change the
        /// minification approach.
        #[repr(C)]
        #[derive(Clone, Copy)]
        pub struct Config {
          /// Allow unquoted attribute values in the output to contain characters prohibited by the
          /// [WHATWG specification](https://html.spec.whatwg.org/multipage/syntax.html#attributes-2).
          /// These will still be parsed correctly by almost all browsers.
          pub allow_noncompliant_unquoted_attribute_values: bool,
          /// Allow some minifications around entities that may not pass validation, but will still
          /// be parsed correctly by almost all browsers.
          pub allow_optimal_entities: bool,
          /// Allow removing spaces between attributes when possible, which may not be spec compliant.
          /// These will still be parsed correctly by almost all browsers.
          pub allow_removing_spaces_between_attributes: bool,
          /// Do not omit closing tags when possible.
          pub keep_closing_tags: bool,
          /// Keep all comments.
          pub keep_comments: bool,
          /// Do not omit `<html>` and `<head>` opening tags when they don't have attributes.
          pub keep_html_and_head_opening_tags: bool,
          /// Keep `type=text` attribute name and value on `<input>` elements.
          pub keep_input_type_text_attr: bool,
          /// Keep SSI comments.
          pub keep_ssi_comments: bool,
          /// Minify CSS in `<style>` tags and `style` attributes using
          /// [https://github.com/parcel-bundler/lightningcss](lightningcss).
          pub minify_css: bool,
          /// Minify DOCTYPEs. Minified DOCTYPEs may not be spec compliant, but will still be parsed
          /// correctly by almost all browsers.
          pub minify_doctype: bool,
          /// Minify JavaScript in `<script>` tags using [minify-js](https://github.com/wilsonzlin/minify-js).
          pub minify_js: bool,
          /// When `{{`, `{#`, or `{%` are seen in content, all source code until the subsequent matching closing
          /// `}}`, `#}`, or `%}` respectively gets piped through untouched.
          pub preserve_brace_template_syntax: bool,
          /// When `<%` is seen in content, all source code until the subsequent matching closing `%>` gets
          /// piped through untouched.
          pub preserve_chevron_percent_template_syntax: bool,
          /// Remove all bangs.
          pub remove_bangs: bool,
          /// Remove all processing instructions.
          pub remove_processing_instructions: bool,
        }
        impl ::core::fmt::Debug for Config {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Config")
              .field(
                "allow-noncompliant-unquoted-attribute-values",
                &self.allow_noncompliant_unquoted_attribute_values,
              )
              .field("allow-optimal-entities", &self.allow_optimal_entities)
              .field(
                "allow-removing-spaces-between-attributes",
                &self.allow_removing_spaces_between_attributes,
              )
              .field("keep-closing-tags", &self.keep_closing_tags)
              .field("keep-comments", &self.keep_comments)
              .field(
                "keep-html-and-head-opening-tags",
                &self.keep_html_and_head_opening_tags,
              )
              .field("keep-input-type-text-attr", &self.keep_input_type_text_attr)
              .field("keep-ssi-comments", &self.keep_ssi_comments)
              .field("minify-css", &self.minify_css)
              .field("minify-doctype", &self.minify_doctype)
              .field("minify-js", &self.minify_js)
              .field(
                "preserve-brace-template-syntax",
                &self.preserve_brace_template_syntax,
              )
              .field(
                "preserve-chevron-percent-template-syntax",
                &self.preserve_chevron_percent_template_syntax,
              )
              .field("remove-bangs", &self.remove_bangs)
              .field(
                "remove-processing-instructions",
                &self.remove_processing_instructions,
              )
              .finish()
          }
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_minify_html_cabi<T: Guest>(arg0: *mut u8) -> *mut u8 {
          let l0 = *arg0.add(0).cast::<*mut u8>();
          let l1 = *arg0.add(4).cast::<usize>();
          let len2 = l1;
          let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
          let l3 = i32::from(*arg0.add(8).cast::<u8>());
          let result19 = T::minify_html(
            _rt::string_lift(bytes2),
            match l3 {
              0 => None,
              1 => {
                let e = {
                  let l4 = i32::from(*arg0.add(9).cast::<u8>());
                  let l5 = i32::from(*arg0.add(10).cast::<u8>());
                  let l6 = i32::from(*arg0.add(11).cast::<u8>());
                  let l7 = i32::from(*arg0.add(12).cast::<u8>());
                  let l8 = i32::from(*arg0.add(13).cast::<u8>());
                  let l9 = i32::from(*arg0.add(14).cast::<u8>());
                  let l10 = i32::from(*arg0.add(15).cast::<u8>());
                  let l11 = i32::from(*arg0.add(16).cast::<u8>());
                  let l12 = i32::from(*arg0.add(17).cast::<u8>());
                  let l13 = i32::from(*arg0.add(18).cast::<u8>());
                  let l14 = i32::from(*arg0.add(19).cast::<u8>());
                  let l15 = i32::from(*arg0.add(20).cast::<u8>());
                  let l16 = i32::from(*arg0.add(21).cast::<u8>());
                  let l17 = i32::from(*arg0.add(22).cast::<u8>());
                  let l18 = i32::from(*arg0.add(23).cast::<u8>());

                  Config {
                    allow_noncompliant_unquoted_attribute_values: _rt::bool_lift(l4 as u8),
                    allow_optimal_entities: _rt::bool_lift(l5 as u8),
                    allow_removing_spaces_between_attributes: _rt::bool_lift(l6 as u8),
                    keep_closing_tags: _rt::bool_lift(l7 as u8),
                    keep_comments: _rt::bool_lift(l8 as u8),
                    keep_html_and_head_opening_tags: _rt::bool_lift(l9 as u8),
                    keep_input_type_text_attr: _rt::bool_lift(l10 as u8),
                    keep_ssi_comments: _rt::bool_lift(l11 as u8),
                    minify_css: _rt::bool_lift(l12 as u8),
                    minify_doctype: _rt::bool_lift(l13 as u8),
                    minify_js: _rt::bool_lift(l14 as u8),
                    preserve_brace_template_syntax: _rt::bool_lift(l15 as u8),
                    preserve_chevron_percent_template_syntax: _rt::bool_lift(l16 as u8),
                    remove_bangs: _rt::bool_lift(l17 as u8),
                    remove_processing_instructions: _rt::bool_lift(l18 as u8),
                  }
                };
                Some(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            },
          );
          _rt::cabi_dealloc(arg0, 24, 4);
          let ptr20 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
          let vec21 = (result19.into_bytes()).into_boxed_slice();
          let ptr21 = vec21.as_ptr().cast::<u8>();
          let len21 = vec21.len();
          ::core::mem::forget(vec21);
          *ptr20.add(4).cast::<usize>() = len21;
          *ptr20.add(0).cast::<*mut u8>() = ptr21.cast_mut();
          ptr20
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn __post_return_minify_html<T: Guest>(arg0: *mut u8) {
          let l0 = *arg0.add(0).cast::<*mut u8>();
          let l1 = *arg0.add(4).cast::<usize>();
          _rt::cabi_dealloc(l0, l1, 1);
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_minify_html_bytes_cabi<T: Guest>(arg0: *mut u8) -> *mut u8 {
          let l0 = *arg0.add(0).cast::<*mut u8>();
          let l1 = *arg0.add(4).cast::<usize>();
          let len2 = l1;
          let l3 = i32::from(*arg0.add(8).cast::<u8>());
          let result19 = T::minify_html_bytes(
            _rt::Vec::from_raw_parts(l0.cast(), len2, len2),
            match l3 {
              0 => None,
              1 => {
                let e = {
                  let l4 = i32::from(*arg0.add(9).cast::<u8>());
                  let l5 = i32::from(*arg0.add(10).cast::<u8>());
                  let l6 = i32::from(*arg0.add(11).cast::<u8>());
                  let l7 = i32::from(*arg0.add(12).cast::<u8>());
                  let l8 = i32::from(*arg0.add(13).cast::<u8>());
                  let l9 = i32::from(*arg0.add(14).cast::<u8>());
                  let l10 = i32::from(*arg0.add(15).cast::<u8>());
                  let l11 = i32::from(*arg0.add(16).cast::<u8>());
                  let l12 = i32::from(*arg0.add(17).cast::<u8>());
                  let l13 = i32::from(*arg0.add(18).cast::<u8>());
                  let l14 = i32::from(*arg0.add(19).cast::<u8>());
                  let l15 = i32::from(*arg0.add(20).cast::<u8>());
                  let l16 = i32::from(*arg0.add(21).cast::<u8>());
                  let l17 = i32::from(*arg0.add(22).cast::<u8>());
                  let l18 = i32::from(*arg0.add(23).cast::<u8>());

                  Config {
                    allow_noncompliant_unquoted_attribute_values: _rt::bool_lift(l4 as u8),
                    allow_optimal_entities: _rt::bool_lift(l5 as u8),
                    allow_removing_spaces_between_attributes: _rt::bool_lift(l6 as u8),
                    keep_closing_tags: _rt::bool_lift(l7 as u8),
                    keep_comments: _rt::bool_lift(l8 as u8),
                    keep_html_and_head_opening_tags: _rt::bool_lift(l9 as u8),
                    keep_input_type_text_attr: _rt::bool_lift(l10 as u8),
                    keep_ssi_comments: _rt::bool_lift(l11 as u8),
                    minify_css: _rt::bool_lift(l12 as u8),
                    minify_doctype: _rt::bool_lift(l13 as u8),
                    minify_js: _rt::bool_lift(l14 as u8),
                    preserve_brace_template_syntax: _rt::bool_lift(l15 as u8),
                    preserve_chevron_percent_template_syntax: _rt::bool_lift(l16 as u8),
                    remove_bangs: _rt::bool_lift(l17 as u8),
                    remove_processing_instructions: _rt::bool_lift(l18 as u8),
                  }
                };
                Some(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            },
          );
          _rt::cabi_dealloc(arg0, 24, 4);
          let ptr20 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
          let vec21 = (result19).into_boxed_slice();
          let ptr21 = vec21.as_ptr().cast::<u8>();
          let len21 = vec21.len();
          ::core::mem::forget(vec21);
          *ptr20.add(4).cast::<usize>() = len21;
          *ptr20.add(0).cast::<*mut u8>() = ptr21.cast_mut();
          ptr20
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn __post_return_minify_html_bytes<T: Guest>(arg0: *mut u8) {
          let l0 = *arg0.add(0).cast::<*mut u8>();
          let l1 = *arg0.add(4).cast::<usize>();
          let base2 = l0;
          let len2 = l1;
          _rt::cabi_dealloc(base2, len2 * 1, 1);
        }
        pub trait Guest {
          /// Minifies HTML code.
          fn minify_html(src: _rt::String, cfg: Option<Config>) -> _rt::String;
          /// Minifies HTML code represented as UTF-8 bytes.
          fn minify_html_bytes(src: _rt::Vec<u8>, cfg: Option<Config>) -> _rt::Vec<u8>;
        }
        #[doc(hidden)]

        macro_rules! __export_wilsonzlin_minify_html_minify_html_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "wilsonzlin:minify-html/minify-html#minify-html"]
        unsafe extern "C" fn export_minify_html(arg0: *mut u8,) -> *mut u8 {
          $($path_to_types)*::_export_minify_html_cabi::<$ty>(arg0)
        }
        #[export_name = "cabi_post_wilsonzlin:minify-html/minify-html#minify-html"]
        unsafe extern "C" fn _post_return_minify_html(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_minify_html::<$ty>(arg0)
        }
        #[export_name = "wilsonzlin:minify-html/minify-html#minify-html-bytes"]
        unsafe extern "C" fn export_minify_html_bytes(arg0: *mut u8,) -> *mut u8 {
          $($path_to_types)*::_export_minify_html_bytes_cabi::<$ty>(arg0)
        }
        #[export_name = "cabi_post_wilsonzlin:minify-html/minify-html#minify-html-bytes"]
        unsafe extern "C" fn _post_return_minify_html_bytes(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_minify_html_bytes::<$ty>(arg0)
        }
      };);
    }
        #[doc(hidden)]
        pub(crate) use __export_wilsonzlin_minify_html_minify_html_cabi;
        #[repr(align(4))]
        struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
        static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
      }
    }
  }
}
mod _rt {
  pub use alloc_crate::vec::Vec;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      String::from_utf8_unchecked(bytes)
    }
  }
  pub unsafe fn bool_lift(val: u8) -> bool {
    if cfg!(debug_assertions) {
      match val {
        0 => false,
        1 => true,
        _ => panic!("invalid bool discriminant"),
      }
    } else {
      ::core::mem::transmute::<u8, bool>(val)
    }
  }
  pub unsafe fn invalid_enum_discriminant<T>() -> T {
    if cfg!(debug_assertions) {
      panic!("invalid enum discriminant")
    } else {
      core::hint::unreachable_unchecked()
    }
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    let layout = alloc::Layout::from_size_align_unchecked(size, align);
    alloc::dealloc(ptr as *mut u8, layout);
  }
  pub use alloc_crate::string::String;
  extern crate alloc as alloc_crate;
  pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_minify_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wilsonzlin::minify_html::minify_html::__export_wilsonzlin_minify_html_minify_html_cabi!($ty with_types_in $($path_to_types_root)*::exports::wilsonzlin::minify_html::minify_html);
  )
}
#[doc(inline)]
pub(crate) use __export_minify_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:minify:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 680] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xab\x04\x01A\x02\x01\
A\x02\x01B\x08\x01r\x0f,allow-noncompliant-unquoted-attribute-values\x7f\x16allo\
w-optimal-entities\x7f(allow-removing-spaces-between-attributes\x7f\x11keep-clos\
ing-tags\x7f\x0dkeep-comments\x7f\x1fkeep-html-and-head-opening-tags\x7f\x19keep\
-input-type-text-attr\x7f\x11keep-ssi-comments\x7f\x0aminify-css\x7f\x0eminify-d\
octype\x7f\x09minify-js\x7f\x1epreserve-brace-template-syntax\x7f(preserve-chevr\
on-percent-template-syntax\x7f\x0cremove-bangs\x7f\x1eremove-processing-instruct\
ions\x7f\x04\0\x06config\x03\0\0\x01k\x01\x01@\x02\x03srcs\x03cfg\x02\0s\x04\0\x0b\
minify-html\x01\x03\x01p}\x01@\x02\x03src\x04\x03cfg\x02\0\x04\x04\0\x11minify-h\
tml-bytes\x01\x05\x04\x01\"wilsonzlin:minify-html/minify-html\x05\0\x04\x01\x1dw\
ilsonzlin:minify-html/minify\x04\0\x0b\x0c\x01\0\x06minify\x03\0\0\0G\x09produce\
rs\x01\x0cprocessed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.\
21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen_rt::maybe_link_cabi_realloc();
}
